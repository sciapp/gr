darwin-self-contained:
  stage: build
  image: macos:sonoma-gr-build
  tags:
  - utm
  script:
  - |-
    create_artifacts_directory() {
      local app binary qt_framework

      mv ./install/usr/local/gr ./artifacts
      for app in gksqt.app grplot.app; do
        mkdir -p "artifacts/Applications/${app}/Contents/Frameworks"
        mkdir -p "artifacts/Applications/${app}/Contents/plugins/platforms"
        mkdir -p "artifacts/Applications/${app}/Contents/plugins/styles"
        cp /usr/local/qt6/plugins/platforms/libqcocoa.dylib "artifacts/Applications/${app}/Contents/plugins/platforms/"
        cp /usr/local/qt6/plugins/styles/libqmacstyle.dylib "artifacts/Applications/${app}/Contents/plugins/styles/"
        pushd artifacts/Applications
        for binary in \
          "${app}/Contents/plugins/platforms/libqcocoa.dylib" \
          "${app}/Contents/plugins/styles/libqmacstyle.dylib" \
          "${app}/Contents/MacOS/${app%.*}"
        do
          for qt_framework in $(otool -L "${binary}" | tr '/' '\n' | grep -E 'Qt.*\.framework' | cut -d. -f1 | uniq); do
            rsync -a --exclude Headers --exclude *_debug* "/usr/local/qt6/lib/${qt_framework}.framework" "${app}/Contents/Frameworks/"
            install_name_tool -change `otool -L "${binary}" | grep "${qt_framework}" | cut -d\( -f1 | head -1` "@executable_path/../Frameworks/${qt_framework}.framework/Versions/Current/${qt_framework}" "${binary}"
          done
        done
        codesign -f -s - ${app}
        codesign -f -s - ${app}/Contents/Frameworks/*.framework
        codesign -f -s - ${app}/Contents/Frameworks/Qt*.framework/Qt*
        codesign -f -s - ${app}/Contents/plugins/platforms/libqcocoa.dylib
        codesign -f -s - ${app}/Contents/plugins/styles/libqmacstyle.dylib
        popd
      done
    }
  - |-
    merge_artifacts () (
      needs_merge () {
        local filepath file_cmd_output

        filepath="$1"
        file_cmd_output="$(file -b "${filepath}" | head -1)"
        if [[ "${file_cmd_output}" =~ (Mach-O.*(shared library|executable))|ar\ archive ]]; then
          [[ ! "${file_cmd_output}" =~ universal\ binary ]]
          return
        fi

        return 1
      }

      create_directory_preserved () {
        local original_dir new_dir owner group mode

        original_dir="$1"
        new_dir="$2"

        owner=$(stat -f "%Su" "${original_dir}")
        group=$(stat -f "%Sg" "${original_dir}")
        mode=$(stat -f "%A" "${original_dir}")

        install -d -m "${mode}" -o "${owner}" -g "${group}" "${new_dir}"
      }

      merge_directories () {
        local src_a src_b dest filepath dirpath

        src_a="$1"
        src_b="$2"
        dest="$3"

        echo "Create directory \"${dest}\" (apply ownership and mode from \"${src_a}\")"
        create_directory_preserved "${src_a}" "${dest}"
        while IFS= read -r filepath; do
          filepath="${filepath#./}"
          if needs_merge "${src_a}/${filepath}"; then
            echo "Merge \"${src_a}/${filepath}\" and \"${src_b}/${filepath}\" -> \"${dest}/${filepath}\""
            lipo -create "${src_a}/${filepath}" "${src_b}/${filepath}" -output "${dest}/${filepath}"
          else
            echo "Copy file \"${src_a}/${filepath}\" -> \"${dest}/${filepath}\""
            cp -a "${src_a}/${filepath}" "${dest}/${filepath}"
          fi
        done < <(cd "${src_a}" && find . -mindepth 1 -maxdepth 1 -type f)
        while IFS= read -r filepath; do
          filepath="${filepath#./}"
          echo "Copy symlink \"${src_a}/${filepath}\" -> \"${dest}/${filepath}\""
          cp -a "${src_a}/${filepath}" "${dest}/${filepath}"
        done < <(cd "${src_a}" && find . -mindepth 1 -maxdepth 1 -type l)
        while IFS= read -r dirpath; do
          dirpath="${dirpath#./}"
          merge_directories "${src_a}/${dirpath}" "${src_b}/${dirpath}" "${dest}/${dirpath}"
        done < <(cd "${src_a}" && find . -mindepth 1 -maxdepth 1 -type d)
      }

      merge_directories "$@"
    )
  - export MACOSX_DEPLOYMENT_TARGET=10.15
  - make -C 3rdparty default extras
  - cmake
      -S .
      -B build
      -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_INSTALL_PREFIX=/usr/local/gr
      -DGR_USE_BUNDLED_LIBRARIES=ON
  - cmake --build build
  - DESTDIR="${CI_PROJECT_DIR}/install"
    cmake --install build
  - create_artifacts_directory
  - mv artifacts artifacts-darwin-aarch64
  - git clean -fdx --exclude=artifacts-darwin-aarch64
  - export MACOSX_DEPLOYMENT_TARGET=11.0
  - make -C 3rdparty default extras
      ARCHS="-arch x86_64"
      CC="cc -arch x86_64"
      CXX="c++ -arch x86_64"
      CAIRO_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin"
      FFMPEG_EXTRA_CONFIGURE_FLAGS="--arch=x86_64 --cc=\"cc -arch x86_64\" --cxx=\"c++ -arch x86_64\" --enable-cross-compile"
      GLFW_EXTRA_CMAKE_FLAGS="-DCMAKE_OSX_ARCHITECTURES=x86_64"
      OGG_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin"
      OPENH264_EXTRA_MAKE_FLAGS="ARCH=x86_64"
      PIXMAN_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin"
      THEORA_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin --disable-asm"
      TIFF_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin"
      XERCES_C_EXTRA_CMAKE_FLAGS="-DCMAKE_OSX_ARCHITECTURES=x86_64"
      ZEROMQ_EXTRA_CONFIGURE_FLAGS="--host=x86_64-apple-darwin"
  - cmake
      -S .
      -B build
      -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_INSTALL_PREFIX=/usr/local/gr
      -DGR_USE_BUNDLED_LIBRARIES=ON
      -DCMAKE_TOOLCHAIN_FILE="cmake/x86_64-darwin-clang.cmake"
      -DGR_HOST_DIRECTORY="${CI_PROJECT_DIR}/artifacts-darwin-aarch64"
  - cmake --build build
  - DESTDIR="${CI_PROJECT_DIR}/install"
    cmake --install build
  - create_artifacts_directory
  - mv artifacts artifacts-darwin-x86_64
  - merge_artifacts artifacts-darwin-aarch64 artifacts-darwin-x86_64 artifacts-darwin-universal
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-darwin-aarch64/
    - artifacts-darwin-universal/
    - artifacts-darwin-x86_64/
